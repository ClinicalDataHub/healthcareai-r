% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pivot.R
\name{pivot}
\alias{pivot}
\title{Make a long data frame wide, possibly aggregating rows in the process}
\usage{
pivot(d, grain, spread, fill, fun = sum, missing_fill = NA)
}
\arguments{
\item{d}{data frame}

\item{grain}{Column that defines rows. Unquoted.}

\item{spread}{Column that will become multiple columns. Unquoted.}

\item{fill}{Column to be used to fill the values of cells in the output,
perhaps after aggregation by \code{fun}. If \code{fill} is not provided,
counts will be used, as though a fill column of 1s had been provided.}

\item{fun}{Function for aggreation, defaults to \code{sum}. Custom functions
can be used with the same syntax as the apply family of functions, e.g.
\code{fun = function(x) some_function(another_fun(x))}.}

\item{missing_fill}{Value to fill for combinations of grain and spread that
are not present. Defaults to NA, but 0 may be useful as well.}
}
\value{
A tibble data frame with one row for each unique value of
\code{grain}, and one column for each unique value of \code{spread} plus
one column for the entries in grain.

Entries in the tibble are defined by the fill column. Combinations of
\code{grain} x \code{spread} that are not present in \code{d} will be filled
in with \code{missing_fill}. If there are \code{grain} x \code{spread} pairs
that appear more than once in d, they will be aggregated by \code{fun}.
}
\description{
Make a long data frame wide, possibly aggregating rows in the process
}
\examples{
meds <-
  tibble::tibble(
    patient_id = c("A", "A", "A", "B"),
    medication = c("zoloft", "asprin", "lipitor", "asprin"),
    pills_per_day = c(1, 8, 2, 4)
  )
meds

# Number of pills of each medication each patient gets:
pivot(
  d = meds,
  grain = patient_id,
  spread = medication,
  fill = pills_per_day,
  missing_fill = 0
)

bills <-
  tibble::tibble(
    patient_id = rep(c("A", "B"), each = 4),
    dept_id = rep(c("ED", "ICU"), times = 4),
    charge = runif(8, 0, 1e4),
    date = Sys.Date() - sample(0:2, 8, TRUE)
  )
bills

# Total charges per patient x department:
pivot(bills, patient_id, dept_id, charge, sum)

# Count of charges per patient x day:
pivot(bills, patient_id, date)

# Can provide a custom function to fun, which will take fill as input.
# Get the difference between the greatest and smallest charge in each
# department for each patient and format it as currency.
pivot(d = bills,
      grain = patient_id,
      spread = dept_id,
      fill = charge,
      fun = function(x) paste0("$", round(max(x) - min(x), 2))
)
}
