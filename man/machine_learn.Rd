% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/machine_learn.R
\name{machine_learn}
\alias{machine_learn}
\title{Machine learning made easy}
\usage{
machine_learn(d, ..., outcome, models, tune = TRUE, n_folds = 5,
  tune_depth = 10, impute = TRUE)
}
\arguments{
\item{d}{A data frame}

\item{...}{Columns to be ignored in model training, e.g. ID columns,
unquoted.}

\item{outcome}{Name of the target column, i.e. what you want to predict.
Unquoted. Must be named, i.e. you must specify \code{outcome = }}

\item{models}{Models to be trained, k-nearest neighbors and random forest by
default. See \code{\link{supported_models}} for details.}

\item{tune}{If TRUE (default) models will be tuned via
\code{\link{tune_models}}. If FALSE, models will be trained via
\code{\link{flash_models}} which is substantially faster but produces
less-predictively powerful models.}

\item{n_folds}{How many folds to use to assess out-of-fold accuracy? Default
= 5. Models are evaluated on out-of-fold predictions whether tune is TRUE
or FALSE.}

\item{tune_depth}{How many hyperparameter combinations to try? Defualt = 10.
Ignored if tune is FALSE.}

\item{impute}{Logical, if TRUE (default) missing values will be filled by
\code{\link{hcai_impute}}}
}
\value{
model_list object ready to make predictions via
  \code{\link{predict.model_list}}
}
\description{
Prepare data and train machine learning models.
}
\details{
This is a high-level wrapper function. For finer control of data
  cleaning and preparation use \code{\link{prep_data}} or the functions it
  wraps. For finer control of model tuning use \code{\link{tune_models}}.
}
\examples{
# Split data into training and test sets using a subset of the data for speed
training_data <- pima_diabetes[1:50, ]
test_data <- pima_diabetes[51:60, ]

### Classification ###

# Clean and prep the data, tune algorithms over hyperparameter values to predict diabetes
diabetes_models <- machine_learn(training_data, outcome = diabetes)

# Make predictions (predicted probability of diabetes) on test data
predict(diabetes_models, test_data)

### Regression ###

# Predict numeric outcomes simply by specifying the name of the outcome variable
age_model <- machine_learn(training_data, outcome = age)

# If new data isn't specifed, get predictions on training data. Plot predictions
predict(age_model)

### Faster model training without tuning hyperparameters ###

# Train models at set hyperparameter values by setting tune to FALSE.
# This is faster (especially on larger datasets), but produces models with less predictive accuracy.
machine_learn(training_data, outcome = diabetes, tune = FALSE)
}
