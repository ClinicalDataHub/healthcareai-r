% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/pip.R
\name{pip}
\alias{pip}
\title{Patient Impact Predictor}
\usage{
pip(model, d, new_values, n = 3, allow_same = FALSE,
  repeated_factors = FALSE, smaller_better = TRUE,
  variable_direction = NULL, prohibited_transitions = NULL, id)
}
\arguments{
\item{model}{A model_list object}

\item{d}{A data frame on which \code{model} can make predictions}

\item{new_values}{A list of alternative values of variables of interest. The
names of the list must be variables in \code{d} and the entries are the
alternative value(s) to try.}

\item{n}{Integer, default = 3. The number of alternatives to return for each
patient. Note that the actual number returned may be less than \code{n}
e.g. \code{length(new_values) < n}, but also if, e.g. \code{!allow_same}.}

\item{allow_same}{Logical, default = FALSE. If TRUE, \code{pip} may return
rows with modified_value = original_value and improvment = 0. This happens
when there are fewer than \code{n} modifications for a patient that result
in improvement. Making this TRUE increases the likelihood of getting
\code{n} results for each patient.}

\item{repeated_factors}{Logical, default = FALSE. Do you want multiple
modifications of the same variable for the same patient? E.g. Reducing BMI
to 15 and to 20.}

\item{smaller_better}{Logical, default = TRUE. Are lesser values of the
outcome variable in \code{model} preferable?}

\item{variable_direction}{Named numeric vector with entries of -1 or 1. This
specifies the direction numeric variables are permitted to move to produce
improvements. Names of the vector are variable names; entries are 1 to
indicate only increases can yield improvements or -1 to indicate only
decreases can yield improvements. Numeric variables not appearing in this
list may increase or decrease to yield improvements.}

\item{prohibited_transitions}{A list of data frames that contain variable
modifications that won't be considered by pip. The names of the list are
variables in \code{d}, and data frames have two columns, "from" and "to",
indicating the original value and modified value, respectively, of the
prohibited transition. If column names are not "from" and "to", the first
column will be assumed to be the "from" column.}

\item{id}{An identifying column in \code{d} to return in the output data
frame. If this isn't provided, an ID column from \code{model}'s data prep
will be used if available.}
}
\value{
A tibble with the following columns: id if provided, "variable": the
  name of the variable being altered, "original_value": the patient's
  observed value of "variable", "modified_value": the altered value of
  "variable", "original_prediction": the patient's original prediction,
  "modified_prediction": the patient's prediction given the that "variable"
  changes to "modified_value", "improvement": the difference between the
  original and modified prediction with positive values reflecting
  improvement, based on the value of \code{smaller_better}, and
  "impact_rank": the rank of the modification for that patient.
}
\description{
Idenfity potential opportunities to improve patient outcomes by
  exploring predicted outcomes over changes to input variables. \strong{Note
  that causality cannot be established by this function.} Omited variable
  bias and other statistical phenomena may mean that the impacts predicted
  here are not realizable. Clinical guidance is essentail in choosing
  \code{new_values} and acting on impact predictions. Extensive options are
  provided to control what impact predictions are surfaced, including
  \code{variable_direction} and \code{prohibited_transitions}.
}
\examples{
# First, we need a model to make recommendations
m <- machine_learn(pima_diabetes, patient_id, outcome = diabetes,
                   tune = FALSE, models = "xgb")
# Let's look at changes in predicted outcomes for patients changing their
# weight class, blood glucose, and blood pressure
modifications <- list(weight_class = c("underweight", "normal", "overweight"),
                      plasma_glucose = c(75, 100),
                      diastolic_bp = 70)
pip(model = m, d = pima_diabetes[1:3, ], new_values = modifications)

# In the above example, only one patient is predicted to have a positive
# predicted impact from changing their diastolic_bp to 70, so for the other
# patients fewer than the default n=3 predictions are provided. We can get n=3
# predictions for each patient by specifying allow_same, which will recommend
# the other two patients maintain their current diastolic_bp.
pip(model = m, d = pima_diabetes[1:3, ], new_values = modifications, allow_same = TRUE)

# Sometimes clinical knowledge trumps machine learning. Clinicians should always
# be consulted when using patient impact predictor. If there is clinical
# knowledge to suggest what impact a variable should have, that knowledge can be
# provided to pip. The way it is provided depends on whether the variable is
# categorical (use prohibited_transitions) or numeric (use variable_direction).

# Suppose a clinician says that suggesting a patient change their weight class
# to underweight from any value except normal is a bad idea. We can disallow
# those suggestions through prohibited_transitions. Note the change in patient
# 1's second recommendation.
prohibit <- data.frame(from = setdiff(unique(pima_diabetes$weight_class), "normal"),
                       to = "underweight")
pip(model = m, d = pima_diabetes[1:3, ], new_values = modifications,
    prohibited_transitions = list(weight_class = prohibit))

# Suppose a clinician says that increasing diastolic_bp should never be
# recommended to improve diabetes outcomes, and likewise for reducing
# plasma_glucose (which is clinically silly, but provides an illustration). The
# following code ensures that diastolic_bp is only recommended to decrease and
# plasma_glucose is only recommended to increase. Note that the plasma_glucose
# recommendations disappear, because no patient would see their outcomes
# improve by increasing their plasma_glucose.
directional_changes <- c(diastolic_bp = -1, plasma_glucose = 1)
pip(model = m, d = pima_diabetes[1:3, ], new_values = modifications,
    variable_direction = directional_changes)
}
